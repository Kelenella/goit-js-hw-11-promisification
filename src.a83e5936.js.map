{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger2","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAgIA,aAhIA,QAAA,oBAOA,MAAMA,EAAQC,GAEL,IAAIC,QAASC,IAClBC,WAAW,KACTD,EAAQF,IACPA,KAIDI,EAAUC,GAAQC,QAAQC,sBAAsBF,OAItDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAMjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAarBC,EAAkB,CAACC,EAAUC,KACzBC,MAAAA,EAAeF,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAG1DhB,OAAAA,QAAQC,QAAQa,IASrBG,EAAUH,GAAgBT,QAAQa,MAAMJ,GAK9CH,EAAgBH,EAAO,SACvBG,EAAgBH,EAAO,OAKvBG,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GAOnC,MAAME,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAIlDK,EAAmBC,GACf,IAAI1B,QAAQ,CAACC,EAAS0B,KACpB7B,MAAAA,EAAQqB,EAA0B,IAAK,KAC3CjB,WAAW,KACYoB,KAAKE,SAAW,GAElCvB,EAAQ,CAAC2B,GAAGF,EAAYE,GAAIxB,KAAKN,IAEhC6B,EAAOD,EAAYE,KAEpB9B,KAKP+B,EAAcH,IACdrB,QAAQC,mBAAmBoB,EAAYE,mBAAmBF,EAAYtB,WAGlE0B,EAAWF,IACfvB,QAAQ0B,qCAAqCH,+BAa/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MACnCzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH","file":"src.a83e5936.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n// Задание 1\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" \n// через ms миллисекунд. Значением исполнившегося промиса должно быть\n// то кол - во миллисекунд, которое передали во время вызова функции delay.\n\nconst delay = ms => {\n  // Твой код\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(ms)\n    }, ms)\n  })\n};\n\nconst logger1 = time => console.log(`Resolved after ${time}ms`);\n\n\n// Вызовы функции для проверки\ndelay(2000).then(logger1); // Resolved after 2000ms\ndelay(1000).then(logger1); // Resolved after 1000ms\ndelay(1500).then(logger1); // Resolved after 1500ms\n\n// Задание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \n// а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n\n\n// const toggleUserState = async (allUsers, userName) => {\n//     const updatedUsers = allUsers.map(user =>\n//         user.name === userName ? { ...user, active: !user.active } : user,\n//     );\n\n//     return (updatedUsers);\n// };\n\n\nconst toggleUserState = (allUsers, userName) => {\n    const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n    );\n\n    return Promise.resolve(updatedUsers);\n};\n\n// const toggleUserState = (allUsers, userName) => {\n//     return Promise.resolve(allUsers.map(user =>\n//         user.name === userName ? { ...user, active: !user.active } : user,\n//     ))\n// };\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\ntoggleUserState(users, 'Mango', logger2);\ntoggleUserState(users, 'Lux', logger2);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger2);\ntoggleUserState(users, 'Lux').then(logger2);\n\n// Задание 3\n\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \n// а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n\nconst makeTransaction = (transaction) => {\n   return new Promise((resolve, reject) => {\n      const delay = randomIntegerFromInterval(200, 500);\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n             resolve({id:transaction.id, time:delay});\n            } else {\n              reject(transaction.id);\n            }\n          }, delay);\n        }\n    )\n};\n\nconst logSuccess = (transaction) => {\n      console.log(`Transaction ${transaction.id} processed in ${transaction.time}ms`);\n    };\n    \n    const logError = id => {\n      console.warn(`Error processing transaction ${id}. Please try again later.`);\n    };\n\n    /*\n     * Работает так\n     */\n    // makeTransaction({ id: 70, amount: 150 }, logSuccess, logError)\n    // makeTransaction({ id: 71, amount: 230 }, logSuccess, logError)\n    // makeTransaction({ id: 72, amount: 75 }, logSuccess, logError)\n    // makeTransaction({ id: 73, amount: 100 }, logSuccess, logError)\n    /*\n     * Должно работать так\n     */\n    makeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"]}